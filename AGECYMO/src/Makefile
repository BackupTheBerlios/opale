#############################################################################
# Makefile for building: modeler
# Generated by qmake (1.07a) (Qt 3.3.3) on: Mon Oct 25 21:38:41 2004
# Project:  modeler.pro
# Template: app
# Command: $(QMAKE) -o Makefile modeler.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -g -D_REENTRANT  -DQT_THREAD_SUPPORT
CXXFLAGS = -pipe -Wall -W -g -D_REENTRANT  -DQT_THREAD_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/qt/3/mkspecs/linux-g++ -I. -I$(QTDIR)/include -I/usr/X11R6/include -I/usr/X11R6/include -Imoc/
LINK     = g++
LFLAGS   =  -Wl,-rpath,$(QTDIR)/lib
LIBS     = $(SUBLIBS) -L$(QTDIR)/lib -L/usr/X11R6/lib -L/usr/X11R6/lib -lm -lqt-mt -lGLU -lGL -lXmu -lXext -lX11 -lm -lpthread
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = obj/

####### Files

HEADERS = absVector.hpp \
		point.hpp \
		vector.hpp \
		matrix.hpp \
		absface.hpp \
		face.hpp \
		tria.hpp \
		quad.hpp \
		faces.hpp \
		nurbscurve.hpp \
		renderer.hpp \
		testVector.hpp \
		camera.hpp \
		abscanvas.hpp \
		canvas2d.hpp \
		canvas3d.hpp \
		window3d.hpp \
		mainwindow.hpp
SOURCES = testVector.cpp \
		matrix.cpp \
		absface.cpp \
		face.cpp \
		tria.cpp \
		quad.cpp \
		faces.cpp \
		nurbscurve.cpp \
		renderer.cpp \
		camera.cpp \
		abscanvas.cpp \
		canvas2d.cpp \
		canvas3d.cpp \
		window3d.cpp \
		mainwindow.cpp \
		main.cpp
OBJECTS = obj/testVector.o \
		obj/matrix.o \
		obj/absface.o \
		obj/face.o \
		obj/tria.o \
		obj/quad.o \
		obj/faces.o \
		obj/nurbscurve.o \
		obj/renderer.o \
		obj/camera.o \
		obj/abscanvas.o \
		obj/canvas2d.o \
		obj/canvas3d.o \
		obj/window3d.o \
		obj/mainwindow.o \
		obj/main.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = moc/moc_abscanvas.cpp \
		moc/moc_canvas3d.cpp \
		moc/moc_mainwindow.cpp
OBJMOC = obj/moc_abscanvas.o \
		obj/moc_canvas3d.o \
		obj/moc_mainwindow.o
DIST	   = modeler.pro
QMAKE_TARGET = modeler
DESTDIR  = 
TARGET   = modeler

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(OBJCOMP) $(LIBS)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: modeler.pro  /usr/qt/3/mkspecs/linux-g++/qmake.conf 
	$(QMAKE) -o Makefile modeler.pro
qmake: 
	@$(QMAKE) -o Makefile modeler.pro

dist: 
	@mkdir -p obj/modeler && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) obj/modeler/ && ( cd `dirname obj/modeler` && $(TAR) modeler.tar modeler && $(GZIP) modeler.tar ) && $(MOVE) `dirname obj/modeler`/modeler.tar.gz . && $(DEL_FILE) -r obj/modeler

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:

yaccclean:
lexclean:
clean: mocclean
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

obj/testVector.o: testVector.cpp testVector.hpp \
		absVector.hpp \
		vector.hpp \
		point.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/testVector.o testVector.cpp

obj/matrix.o: matrix.cpp matrix.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/matrix.o matrix.cpp

obj/absface.o: absface.cpp absface.hpp \
		point.hpp \
		absVector.hpp \
		vector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/absface.o absface.cpp

obj/face.o: face.cpp face.hpp \
		absface.hpp \
		point.hpp \
		absVector.hpp \
		vector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/face.o face.cpp

obj/tria.o: tria.cpp tria.hpp \
		absface.hpp \
		point.hpp \
		absVector.hpp \
		vector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/tria.o tria.cpp

obj/quad.o: quad.cpp quad.hpp \
		absface.hpp \
		point.hpp \
		absVector.hpp \
		vector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/quad.o quad.cpp

obj/faces.o: faces.cpp faces.hpp \
		absface.hpp \
		tria.hpp \
		point.hpp \
		absVector.hpp \
		vector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/faces.o faces.cpp

obj/nurbscurve.o: nurbscurve.cpp nurbscurve.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/nurbscurve.o nurbscurve.cpp

obj/renderer.o: renderer.cpp renderer.hpp \
		tria.hpp \
		quad.hpp \
		faces.hpp \
		absface.hpp \
		point.hpp \
		absVector.hpp \
		vector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/renderer.o renderer.cpp

obj/camera.o: camera.cpp camera.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/camera.o camera.cpp

obj/abscanvas.o: abscanvas.cpp abscanvas.hpp \
		camera.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/abscanvas.o abscanvas.cpp

obj/canvas2d.o: canvas2d.cpp canvas2d.hpp \
		abscanvas.hpp \
		camera.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/canvas2d.o canvas2d.cpp

obj/canvas3d.o: canvas3d.cpp canvas3d.hpp \
		camera.hpp \
		abscanvas.hpp \
		renderer.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp \
		tria.hpp \
		quad.hpp \
		faces.hpp \
		absface.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/canvas3d.o canvas3d.cpp

obj/window3d.o: window3d.cpp window3d.hpp \
		abscanvas.hpp \
		canvas3d.hpp \
		camera.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp \
		renderer.hpp \
		tria.hpp \
		quad.hpp \
		faces.hpp \
		absface.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/window3d.o window3d.cpp

obj/mainwindow.o: mainwindow.cpp mainwindow.hpp \
		canvas2d.hpp \
		canvas3d.hpp \
		window3d.hpp \
		abscanvas.hpp \
		camera.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp \
		renderer.hpp \
		tria.hpp \
		quad.hpp \
		faces.hpp \
		absface.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/mainwindow.o mainwindow.cpp

obj/main.o: main.cpp mainwindow.hpp \
		testVector.hpp \
		canvas2d.hpp \
		canvas3d.hpp \
		window3d.hpp \
		abscanvas.hpp \
		camera.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp \
		renderer.hpp \
		tria.hpp \
		quad.hpp \
		faces.hpp \
		absface.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/main.o main.cpp

obj/moc_abscanvas.o: moc/moc_abscanvas.cpp  abscanvas.hpp camera.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/moc_abscanvas.o moc/moc_abscanvas.cpp

obj/moc_canvas3d.o: moc/moc_canvas3d.cpp  canvas3d.hpp camera.hpp \
		abscanvas.hpp \
		renderer.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp \
		tria.hpp \
		quad.hpp \
		faces.hpp \
		absface.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/moc_canvas3d.o moc/moc_canvas3d.cpp

obj/moc_mainwindow.o: moc/moc_mainwindow.cpp  mainwindow.hpp canvas2d.hpp \
		canvas3d.hpp \
		window3d.hpp \
		abscanvas.hpp \
		camera.hpp \
		point.hpp \
		vector.hpp \
		absVector.hpp \
		renderer.hpp \
		tria.hpp \
		quad.hpp \
		faces.hpp \
		absface.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/moc_mainwindow.o moc/moc_mainwindow.cpp

moc/moc_abscanvas.cpp: $(MOC) abscanvas.hpp
	$(MOC) abscanvas.hpp -o moc/moc_abscanvas.cpp

moc/moc_canvas3d.cpp: $(MOC) canvas3d.hpp
	$(MOC) canvas3d.hpp -o moc/moc_canvas3d.cpp

moc/moc_mainwindow.cpp: $(MOC) mainwindow.hpp
	$(MOC) mainwindow.hpp -o moc/moc_mainwindow.cpp

####### Install

install:  

uninstall:  

